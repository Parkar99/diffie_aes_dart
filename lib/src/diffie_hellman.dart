import 'package:cryptography/cryptography.dart';
import 'package:ninja_prime/ninja_prime.dart';

class DiffieHellman {
  static final N = BigInt.parse(
      '11890042100813547049111167590383944676094990437203198177860747115049482801879303272673707255519756915024565592205019513796653204238435147201829240930947967189563854228483778477530545650315651556221744692960265681871788266659481280985179337540612399551838794150230507993890096251828447417172954719456728164459144514762060349474343842790072494285730386191994007449862744405746896257015633046950585985422028602504778617009908199236527521591974886824222357193725430686834035283950297792264316081574798578612117698391141763117181167476936149453048584007340575978007863533996686672796844687439160715851983788865463464155377845588722759542623179158029933864145545016674884196673721917553087556740519888455911325850022214389224590531126725083058164647803953562797145080964514959739509075252064453430616262090666876316013981505097790315739712736174989771179286877181545062155458736235025558618983693671437945782853518310716153056025706231404281941967874559883091290461590793124774435926532444711258696638270790303915342469099915257620053539912180618167106356158953250598194446494618636455446485353051177893002018875315913249912539169705372641212645988792214811422206645116585012479529473249898592771802942149421493');
  static final G = BigInt.parse(
      '8199374034429501202011558570705670366858638363283872522616673609653609428872982494926892583087880024520651463778209188244666092351451560501397490547656204751158245351722052522802949553652044614657161901398129489743160606080889498037455728521945017556575358455125316753636810285434856812631967846139426700949815508885522043873089357313049785927548186181651714289917543490791239256565084629962794344477455556232090133865656943426422293678203705687977283304265402531525459405423629993962510125475214351757320175561600478552666098384306468321740486194144859410417279780779492684314604028831962129238177324010638870111528717201742360623634406642706833406709790470409842901585838532011125803907284526416167567953138961118582119595255958506748380085786863032051150635145389303324376202323868701477835886334210815503416898325604323515867815886361342719545997034413398126700609682587382589364650294046486460717183828220400881810430342052033276257155397293870523292993772631641920983402996679626712216789141071577631309306776290741331816379734855488069783543910620638908623894626218707513028600182475096535998651866607325841430909872074956425224024508709786445861183614677502378810147');

  late BigInt _privateKey;
  late BigInt _publicKey;

  DiffieHellman({int privateKeyLength = 256}) {
    _generatePrivateKey(privateKeyLength);
    _generatePublicKey();
  }

  DiffieHellman.from(BigInt value) {
    _privateKey = value;
    _generatePublicKey();
  }

  DiffieHellman.fromJson(Map<String, dynamic> json) {
    final pK = BigInt.tryParse(json['private_key'] as String);
    assert(pK != null, 'private_key is not a valid integer');
    _privateKey = pK!;
    _generatePublicKey();
  }

  @override
  int get hashCode => _privateKey.hashCode ^ _publicKey.hashCode;

  BigInt get privateKey => _privateKey;

  BigInt get publicKey => _publicKey;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is DiffieHellman &&
          runtimeType == other.runtimeType &&
          _privateKey == other._privateKey &&
          _publicKey == other._publicKey;

  BigInt getSymmetricKeyFor(BigInt otherPublicKey) {
    return otherPublicKey.modPow(_privateKey, N);
  }

  static Future<String> hashedSymmetricKey(BigInt symmetricKey) async {
    final hash = await Hmac.sha256()
        .hashAlgorithm
        .hash(symmetricKey.toString().codeUnits);
    return String.fromCharCodes(hash.bytes);
  }

  Map<String, dynamic> toJson() {
    return {
      'private_key': _privateKey.toString(),
    };
  }

  @override
  String toString() {
    return 'DiffieHellman{_privateKey: $_privateKey, _publicKey: $_publicKey}';
  }

  void _generatePrivateKey(int primeLength) {
    _privateKey = randomPrimeBigInt(primeLength);
  }

  void _generatePublicKey() {
    _publicKey = G.modPow(_privateKey, N);
  }
}
